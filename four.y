%{
#include <iostream>

int yylex(); // A function that is to be generated and provided by flex,
             // which returns a next token when called repeatedly.
int yyerror(const char *p) { std::cerr << "error: " << p << std::endl; };
%}

%union {
    int val;
    /* You may include additional fields as you want. */
    /* char op; */
};

%start prog
%token program
%token line
%token statement
%token expr-list 
%token var-list
%token expression
%token term
%token factor
%token number
%token DIGIT
%token VAR
%token LPAREN RPAREN
%token PLUMIN
%token STRING
%token COMMA
%token CR
%type <val> expr

%token <val> NUM    /* 'val' is the (only) field declared in %union
                       which represents the type of the token. */


/* Resolve the ambiguity of the grammar by defining precedence. */

/* Order of directives will determine the precedence. */
%left PLUS MINUS    /* left means left-associativity. */
%left DIV MUL

%%

program:	line program                            { std::cout << $1 << std::endl; } ;

line:	number statement CR
	| statement CR
	;

statement:	PRINT expr-list
	|	IF expression RELOP expression THEN statement
	|	GOTO expression
	|	INPUT var-list
	|	LET VAR = expression
	| 	GOSUB expression
	|	RETURN
	| 	CLEAR
	| 	LIST
	| 	RUN
	|	END
	;

expr : expr PLUS expr                   { $$ = $1 + $3; }
     | expr MINUS expr                  { $$ = $1 - $3; }
     | expr MUL expr                    { $$ = $1 * $3; }
     | expr DIV expr                    { $$ = $1 / $3; }
     | NUM                              /* default action: { $$ = $1; } */
     | LPAREN expr RPAREN               { $$ = $2; }
     ;

%%

int main()
{
    yyparse(); // A parsing function that will be generated by Bison.
    return 0;
}

