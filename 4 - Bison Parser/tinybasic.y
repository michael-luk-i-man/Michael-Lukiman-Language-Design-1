/*Michael Luiman - Courant Institute - Priyanka Suresh - Cory Plock
tinybasic.y*/
%{
#include <iostream>

int yylex();

void yyerror (char const *s) {
   fprintf (stderr, "%s\n", s);
 }

%}

%union {
    int num;
    /* You may include additional fields as you want. */
    /* char op; */
};

%token CR
%token COMMA
%token LPAREN RPAREN
%token RELOP
%token MULDIV
%token PLUMIN
%token STRING
%token VAR
%token KEYWORD
%token <num> DIGIT
%token ASS
%token PRINT                 
%token IF    
%token THEN              
%token GOTO                
%token INPUT                
%token LET                 
%token GOSUB                    
%token RETURN            
%token CLEAR                
%token LIST                
%token RUN                 
%token END                  


%left MULDIV PLUMIN   /* left means left-associativity. */

%%

program:    line                       /* {$$ =  $1;}*/      
    |       program line               /* {$$ =  $1;}*/ 
    ;

line:       number statement CR        /* {$$ =  $1;}*/ 
    |       statement CR               /* {$$ =  $1;}*/ 
    ;

statement:  PRINT expr_list            /* {$$ =  $1;}*/ 
    |       IF expression RELOP expression THEN statement /* {$$ =  $1;}*/ 
    |       GOTO expression            /* {$$ =  $1;}*/ 
    |       INPUT var_list             /* {$$ =  $1;}*/ 
    |       LET VAR "=" expression     /* {$$ =  $1;}*/   
    |       GOSUB expression           /* {$$ =  $1;}*/
    |       RETURN                     /* {$$ =  $1;}*/
    |       CLEAR                      /* {$$ =  $1;}*/
    |       LIST                       /* {$$ =  $1;}*/
    |       RUN                        /* {$$ =  $1;}*/
    |       LPAREN expression RPAREN   /* {$$ =  $1;}*/
    |       END                        /* {$$ =  $1;}*/
    ;


expr_list:  strexp COMMA expr_list     /* {$$ =  $1;}*/
    |       strexp                     /* {$$ =  $1;}*/
    ;


var_list:   var_list COMMA VAR         /* {$$ =  $1;}*/
    |       VAR                        /* {$$ =  $1;}*/
    ;

strexp:     STRING                     /* {$$ =  $1;}*/
    |       expression                 /* {$$ =  $1;}*/

expression: PLUMIN term expression     /* {$$ =  $1;}*/
    |       PLUMIN term                /* {$$ =  $1;}*/
    ;

term:       factor MULDIV term         /* {$$ =  $1;}*/
    |       factor                     /* {$$ =  $1;}*/
    ;

factor:    VAR                         /* {$$ =  $1;}*/
    |      number                      /* {$$ =  $1;}*/
    |      LPAREN expression RPAREN    /* {$$ =  $1;}*/
    ;

number:     DIGIT number               /* {$$ =  $1;}*/
    |       DIGIT                      /* {$$ =  $1;}*/

%%

int main()
{
    yyparse(); // A parsing function that will be generated by Bison.
    return 0;
}
